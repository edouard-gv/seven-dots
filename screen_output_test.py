from screen_output import MockSerialPort, convert

def sendPrefix(port):
    port.write(0x80)
    port.write(0x83)
    port.write(0x00)

def sendClose(port):
    port.write(0x8F)

def sendBytes(port, *bytes):
    for byte in bytes:
        port.write(byte)
    
def test_noprint_digit():
    port = MockSerialPort()
    sendPrefix(port)
    sendClose(port)
    assert '\n'+port.output.replace(" ", ".") == \
"""
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
"""

def test_oneprint_digit():
    port = MockSerialPort()
    sendPrefix(port)
    sendBytes(port, 0b1111111)
    sendClose(port)
    print(port.output.replace(" ", "."))

    assert port.output.replace(" ", ".") == \
"""\
._.........................
|_|........................
|_|........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
"""

def test_twoprint_digit():
    port = MockSerialPort()
    sendPrefix(port)
    sendBytes(port, 0b1111111, 0x00, 0x00, 0x00, 0b1111111)
    sendClose(port)
    print(port.output.replace(" ", "."))

    assert port.output.replace(" ", ".") == \
"""\
._..._.....................
|_|.|_|....................
|_|.|_|....................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
"""

def test_threeprint_digit():
    port = MockSerialPort()
    sendPrefix(port)
    sendBytes(port, 0b1111111, 0b1111111, 0x00, 0x00)
    sendBytes(port, 0b1111111)
    sendClose(port)
    print(port.output.replace(" ", "."))

    assert port.output.replace(" ", ".") == \
"""\
._..._.....................
|_|.|_|....................
|_|.|_|....................
...........................
._.........................
|_|........................
|_|........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
"""

def test_full_line_print_digit():
    port = MockSerialPort()
    sendPrefix(port)
    for _ in range(7):
        sendBytes(port, 0b1111111, 0x00, 0x00, 0x00)
    sendClose(port)
    print(port.output.replace(" ", "."))

    assert port.output.replace(" ", ".") == \
"""\
._..._..._..._..._..._..._.
|_|.|_|.|_|.|_|.|_|.|_|.|_|
|_|.|_|.|_|.|_|.|_|.|_|.|_|
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
...........................
"""

def test_convert_first_segment():
    assert convert(0b0000001) == [
        '   ',
        ' _ ',
        '   ']

def test_convert_first_and_second_segments():
    assert convert(0b0000011) == [
        '   ',
        '|_ ',
        '   ']

def test_for_fun():
    port = MockSerialPort()
    sendPrefix(port)
    for i in range(28):
        sendBytes(port, i)
    sendClose(port)
    print(port.output.replace(" ", " "))
    assert port.output.replace(" ", " ") == """\
                           
                           
    |    _  |_    | | |  _|
                           
                           
 _   _   _   _   _   _   _ 
    |    _  |_    | | |  _|
                           
                           
|   |   |   |   |   |   |  
    |    _  |_    | | |  _|
                           
                           
|_  |_  |_  |_  |_  |_  |_ 
    |    _  |_    | | |  _|
"""